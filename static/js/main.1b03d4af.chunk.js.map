{"version":3,"sources":["GameLogic/GameLogic.js","Components/Game/GameBody.js","App.js","index.js"],"names":["highlightColRGB","col","colBounds","y","circleRad","p5","rgb","x","width","height","noFill","stroke","length","strokeWeight","rect","getFieldDiagonals","field","diagonals","topLeftStartPositions","bottomLeftStartPositions","i","row","diagonal","push","generateRandomTurn","Math","random","GameBody","winner","currentTurn","hasClicked","id","setup","canvasParentRef","disableFriendlyErrors","divWidth","document","getElementById","offsetWidth","divHeight","offsetHeight","createCanvas","parent","frameRate","draw","clear","xStart","yStart","selectedCol","mouseX","getSelectedCol","noStroke","j","fill","circle","drawStones","drawGrid","fontSize","winText","winTextX","textWidth","winTextY","textSize","textStyle","BOLD","text","drawWinningText","mouseIsPressed","stoneColor","addToField","cur","cursInDiag","cursInARow","cursInACol","checkWin","setTimeout","App","className","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.1b03d4af.chunk.js","sourcesContent":["// GameLogic contains all helper functions\n\n// check in which column mouseX is\nexport const getSelectedCol = (colBounds, mouseX) => {\n    for (let i = 0; i < colBounds.length; i++) {\n        if (mouseX > colBounds[i][0] && mouseX < colBounds[i][1]){\n            return i\n        }\n    }\n    return -1\n}\n\n// paints colored rectangle to highlight the selected column\n// takes an array rgb with all rgb values [R, G, B, A] (A can be omitted)\nexport const highlightColRGB = (col, colBounds, y, circleRad, p5, rgb) => {\n    const x = colBounds[col][0];\n    const width = circleRad;\n    const height = 6 * width;\n\n    p5.noFill();\n    p5.stroke(rgb[0], rgb[1], rgb[2], rgb.length === 4 ? rgb[3] : 255);\n    p5.strokeWeight(4);\n    p5.rect(x, y-circleRad/2, width, height);\n    p5.strokeWeight(1);\n}\n\n// insert new player-stone into game field\n// returns true on success, else false (if stone cant be inserted)\nexport const addToField = (field, col, stoneColor) => {\n    // column already full\n    if (field[0][col] !== \"\"){\n        return false;\n    }\n    for (let i = 0; i < field.length; i++) {\n        // check if last element of col\n        if (i+1 >= field.length){\n            field[i][col] = stoneColor;\n            return true;\n        }\n        // check if stone already placed, true: place new stone before\n        else if (field[i+1][col] !== \"\") {\n            field[i][col] = stoneColor;\n            return true;\n        }\n    }\n    return false;\n}\n\n// check if player won (4 same stones in a row/column/diagonally)\n// returns color of winner, else \"\"\nexport const checkWin = (field) => {\n\n    // check diagonals for win\n    let diagonals = getFieldDiagonals(field);\n    for (let i = 0; i < diagonals.length; i++) {\n        let cur = diagonals[i][0];\n        let cursInDiag = 1;\n        for (let j = 1; j < diagonals[i].length; j++) {\n            if (diagonals[i][j] === cur) {\n                cursInDiag++;\n            }else{\n                cur = diagonals[i][j];\n                cursInDiag = 1;\n            }\n            // won\n            if (cursInDiag >= 4 && cur !== \"\"){\n                return cur;\n            }\n        }\n    }\n    \n    // check rows for win\n    for (let i = 0; i < field.length; i++) {\n        let cur = field[i][0];\n        let cursInARow = 1;\n        for (let j = 1; j < field[i].length; j++) {\n            if (field[i][j] === cur){\n                cursInARow++;\n            }else{\n                cur = field[i][j];\n                cursInARow = 1;\n            }\n            // won\n            if (cursInARow >= 4 && cur !== \"\"){\n                return cur;\n            }\n        }\n    }\n\n    // check columns for win\n    for (let i = 0; i < field[0].length; i++) {\n        let cur = field[0][i];\n        let cursInACol = 1;\n        for (let j = 1; j < field.length; j++) {\n            if (field[j][i] === cur){\n                cursInACol++;\n            }else{\n                cur = field[j][i];\n                cursInACol = 1;\n            }\n            // won\n            if (cursInACol >= 4 && cur !== \"\"){\n                return cur;\n            }\n        }\n    }\n    return \"\";\n}\n\n// return all diagonals of field (length >= 4, because if smaller: can't have four same stones)\nconst getFieldDiagonals = (field) => {\n    let diagonals = [];\n\n    // starting positions for: top left to bottom right - diagonals\n    let topLeftStartPositions = [\n        [2,0],\n        [1,0],\n        [0,0],\n        [0,1],\n        [0,2],\n        [0,3]\n    ]\n    // starting position for: bottom left to up right - diagonals\n    let bottomLeftStartPositions = [\n        [3,0],\n        [4,0],\n        [5,0],\n        [5,1],\n        [5,2],\n        [5,3]\n    ]\n\n    // top to bottom\n    for (let i = 0; i < topLeftStartPositions.length; i++) {\n        let row = topLeftStartPositions[i][0];\n        let col = topLeftStartPositions[i][1];\n\n        let diagonal = [];\n        while (row < field.length && col < field[0].length){\n            diagonal.push(field[row][col]);\n            row++;\n            col++;\n        }\n        diagonals.push(diagonal);\n    }\n    // bottom to top\n    for (let i = 0; i < bottomLeftStartPositions.length; i++) {\n        let row = bottomLeftStartPositions[i][0];\n        let col = bottomLeftStartPositions[i][1];\n\n        let diagonal = [];\n        while (row >= 0 && col < field[0].length){\n            diagonal.push(field[row][col]);\n            row--;\n            col++;\n        }\n        diagonals.push(diagonal);\n    }\n    return diagonals;\n}\n\n// return random char: \"r\" or \"b\" (red and blue)\nexport const generateRandomTurn = () => {\n    if (Math.random() < 0.5){ // 50 % chance\n        return \"b\";\n    }else{\n        return \"r\";\n    }\n}","import Sketch from 'react-p5'\nimport React from 'react'\nimport { addToField, checkWin, generateRandomTurn, getSelectedCol, highlightColRGB } from '../../GameLogic/GameLogic';\nimport './GameBody.css';\n\nconst GameBody = () => {\n    // game field, width = 7, height = 6, red or blue: \"r\" / \"b\"\n    let field = [\n        [\"\", \"\", \"\", \"\", \"\", \"\", \"\"],\n        [\"\", \"\", \"\", \"\", \"\", \"\", \"\"],\n        [\"\", \"\", \"\", \"\", \"\", \"\", \"\"],\n        [\"\", \"\", \"\", \"\", \"\", \"\", \"\"],\n        [\"\", \"\", \"\", \"\", \"\", \"\", \"\"],\n        [\"\", \"\", \"\", \"\", \"\", \"\", \"\"]\n    ]\n    let winner = \"\"; // empty string means no winner yet\n    let currentTurn = generateRandomTurn(); // which player is next, random player starts\n    let hasClicked = false; // if player clicked a short time ago, only accept new clicks if hasClicked is false\n\n    // setup p5\n    const setup = (p5, canvasParentRef) => {\n        // friendly errors are not check -> better performance\n        p5.disableFriendlyErrors = true;\n\n        // get width and height of div gameBody\n        const divWidth = document.getElementById(\"gameBody\").offsetWidth - 2;\n        const divHeight = document.getElementById(\"gameBody\").offsetHeight;\n        p5.createCanvas(divWidth, divHeight).parent(canvasParentRef);\n        p5.frameRate(35);\n    }\n\n    // draw grid\n    const drawGrid = (field, xStart, yStart, circleRad, p5) => {\n        let x = xStart;\n        let y = yStart;\n\n        p5.noFill();\n        p5.stroke(0);\n        p5.strokeWeight(2);\n        for (let i = 0; i < field.length; i++) {\n            for (let j = 0; j < field[i].length; j++) {\n                p5.rect(x-circleRad/2, y-circleRad/2, circleRad, circleRad);\n                x += circleRad;\n            }\n            x = xStart;\n            y += circleRad;\n        }\n    }\n\n    // draw stones\n    const drawStones = (field, xStart, yStart, circleRad, p5) => {\n        let x = xStart;\n        let y = yStart;\n\n        p5.noStroke();\n        for (let i = 0; i < field.length; i++) {\n            for (let j = 0; j < field[i].length; j++) {\n                // position is empty, no stone is drawn\n                if (field[i][j] === \"\"){\n                    x += circleRad;\n                    continue;\n                }\n                else if (field[i][j] === \"r\") {\n                    p5.fill(\"red\");\n                }\n                else if (field[i][j] === \"b\"){\n                    p5.fill(\"blue\");\n                }\n                p5.circle(x, y, circleRad);\n                x += circleRad;\n            }\n            x = xStart;\n            y += circleRad;\n        }\n    }\n\n    // draw text\n    const drawWinningText = (xStart, yStart, circleRad, fontSize, winner, p5) => {\n        const winText = winner === \"r\" ? \"Red has won!\" : \"Blue has won!\";\n        const winTextX = xStart + 4.5 * circleRad - p5.textWidth(winText); // center text horizontally\n        const winTextY = (yStart - fontSize) / 2; // center text vertically\n        if (winner === \"r\"){\n            p5.fill(\"red\");\n        }else{\n            p5.fill(\"blue\");\n        }\n        p5.noStroke();\n        p5.textSize(fontSize);\n        p5.textStyle(p5.BOLD);\n        p5.text(winText, winTextX, winTextY); // draw text\n    }\n\n    // draws field\n    const draw = (p5) => {\n        p5.clear()\n        // get width and height of div gameBody\n        const divWidth = document.getElementById(\"gameBody\").offsetWidth - 2;\n        const divHeight = document.getElementById(\"gameBody\").offsetHeight;\n        const circleRad = 80;\n        const xStep = circleRad;\n        const yStep = circleRad;\n\n        // xStart: starting value of x, used for centering horizontally\n        const xStart = (divWidth - field[0].length * xStep) / 2 + circleRad / 2\n        // yStart: starting value of y, used for centering vertically\n        const yStart = (divHeight - field.length * yStep) / 2 + circleRad / 2\n\n        // cols defines bound of the single columns\n        // used for user input (check which column was clicked)\n        // schema: [starting x value of column, ending x value of column], for each column\n        const colBounds = [\n            [xStart-circleRad/2, xStart-circleRad/2 + circleRad], // first column\n            [xStart-circleRad/2 + circleRad, xStart-circleRad/2 + 2*circleRad], // second column\n            [xStart-circleRad/2 + 2*circleRad, xStart-circleRad/2 + 3*circleRad], // third column\n            [xStart-circleRad/2 + 3*circleRad, xStart-circleRad/2 + 4*circleRad], // fourth column\n            [xStart-circleRad/2 + 4*circleRad, xStart-circleRad/2 + 5*circleRad], // fifth column\n            [xStart-circleRad/2 + 5*circleRad, xStart-circleRad/2 + 6*circleRad], // sixth column\n            [xStart-circleRad/2 + 6*circleRad, xStart-circleRad/2 + 7*circleRad], // seventh column\n        ]\n        const selectedCol = getSelectedCol(colBounds, p5.mouseX);\n\n\n        // draw stones and the grid\n        drawStones(field, xStart, yStart, circleRad, p5);\n        drawGrid(field, xStart, yStart, circleRad, p5);\n        // draw text if player has won\n        if (winner !== \"\") {\n            drawWinningText(xStart, yStart, circleRad, 30, winner, p5);\n        }\n\n        if (selectedCol !== -1){\n            // highlight selected column\n            if (currentTurn === \"r\"){\n                highlightColRGB(selectedCol, colBounds, yStart, circleRad, p5, [255, 0, 0]);\n            }else{\n                highlightColRGB(selectedCol, colBounds, yStart, circleRad, p5, [10, 10, 255]);\n            }\n            \n            if (p5.mouseIsPressed && !hasClicked) { // check if user clicked column and is allowed to click again\n                // if won, reset game by clicking\n                if (winner !== \"\"){\n                    field = [\n                        [\"\", \"\", \"\", \"\", \"\", \"\", \"\"],\n                        [\"\", \"\", \"\", \"\", \"\", \"\", \"\"],\n                        [\"\", \"\", \"\", \"\", \"\", \"\", \"\"],\n                        [\"\", \"\", \"\", \"\", \"\", \"\", \"\"],\n                        [\"\", \"\", \"\", \"\", \"\", \"\", \"\"],\n                        [\"\", \"\", \"\", \"\", \"\", \"\", \"\"]\n                    ]\n                    winner = \"\";\n                    currentTurn = generateRandomTurn();\n\n                }\n                else if (addToField(field, selectedCol, currentTurn)){\n                    if (currentTurn === \"b\"){\n                        currentTurn = \"r\";\n                    }else{\n                        currentTurn = \"b\";\n                    }\n                    // check win\n                    winner = checkWin(field);\n                }\n                \n                \n                // prevent user from clicking multiple times per second (like holding mouse button)\n                hasClicked = true;\n                setTimeout(()=> {\n                    hasClicked = false;\n                }, 250);\n            }\n        }\n    }\n\n    return (\n        <div id=\"gameBody\">\n            <Sketch setup={setup} draw={draw}/>\n        </div>\n    )\n}\n\nexport default GameBody;","import './App.css';\nimport GameBody from './Components/Game/GameBody';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        {/* headline */}\n        <h1 id=\"gameHeadline\">Four In A Row</h1>\n        \n        {/* game's body */}\n        <GameBody />\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}